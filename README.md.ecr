# Kommando [![Crystal CI](https://github.com/Ragmaanir/kommando/actions/workflows/crystal.yml/badge.svg)](https://github.com/Ragmaanir/kommando/actions/workflows/crystal.yml)

### Version <%= Kommando::VERSION %>

Kommando is a library that helps you build small and large command line interfaces in crystal.

## Installation

Add this to your application's `shard.yml`:

```yaml
dependencies:
  kommando:
    github: ragmaanir/kommando
```

## Features

- positional arguments (like in `crystal init app MyApp`)
- short and long options (like `cli new MyProject --dry -v --permissions=644 --repo=github -l=MIT`)
- validation and type conversion of arguments
- auto-generated documentation
- namespaces/subcommands like `cli create user Toby`

## Rationale

**Why classes for commands and not methods**

Classes can define helper methods that are scoped to the command. And the helper methods have access to all options of the command.


## Usage

### Commands

```crystal
<%= File.read("./spec/examples/command.cr") %>
```

### Namespaces

```crystal
require "kommando"

<%= File.read("./spec/examples/namespace.cr") %>
```

## Contributing

1. Fork it (https://github.com/ragmaanir/kommando/fork)
2. Create your feature branch (git checkout -b my-new-feature)
3. Commit your changes (git commit -am 'Add some feature')
4. Push to the branch (git push origin my-new-feature)
5. Create a new Pull Request

## Contributors

- [ragmaanir](https://github.com/ragmaanir) ragmaanir - creator, maintainer
